import pandas as pd
import numpy as np
import os

#Define constants generated by configfile, provided by --configfile argument
outputFolder = config["outputFolder"]
tempFolder = config["tempFolder"]
finalOutput = config["outputMetadata"]
coverageCutoff = config["coverageCutoff"]

studyMetadata = pd.read_csv(config["studyMetadata"])
 
studiesUnique = studyMetadata["study"].unique().tolist()
studies = studyMetadata["study"].tolist()
samples = studyMetadata["sample_id"].tolist()


#Short functions to return values from study metadata. 
def getTotal(wildcards):
    return studyMetadata.loc[studyMetadata["sample_id"] == wildcards.sample_zip, "total"].values[0]
def getAlt(wildcards):
    return studyMetadata.loc[studyMetadata["sample_id"] == wildcards.sample_zip, "alt"].values[0]


rule all:
    input:
        finalOutput,
        outputCompressed = expand(outputFolder + "/{study_zip}/{sample_zip}_predGenotypes_w_accuracy.csv.gz", zip, sample_zip = samples, study_zip = studies)

#run at the zip(study_zip, sample_zip) level
rule genotype_single_sample: 
     input:
         SNPs = config["SNPs"],
         total = getTotal,
         alt = getAlt,
         modelLattice = config["modelLattice"], 
         prior = config["modelPrior"],
         model = config["model"]
     output:
         result = tempFolder + "/{study_zip}/genotype_single_sample/{sample_zip}_predGenotypes.csv",
         outOfLattice = tempFolder + "/{study_zip}/genotype_single_sample/{sample_zip}_outOfLattice.csv"
     resources:
         mem_mb = 10000
     shell:
         "Rscript ../redo_R/genotype_singleSample.R --model {input.model} --sample_id_rep {wildcards.sample_zip}\
         --SNPs {input.SNPs} --total {input.total} --alt {input.alt} --cutoff {coverageCutoff}\
         --modelLattice {input.modelLattice} --prior {input.prior} --tempFolder {tempFolder}\
         --result {output.result} --outOfLattice {output.outOfLattice}"

#run at the study level
rule genotype_outOfLattice_samples:
    input: 
        outOfLattice = rules.genotype_single_sample.output.outOfLattice,
        result = rules.genotype_single_sample.output.result,
        model = config["model"], 
        prior = config["modelPrior"]
    output:
        genotypedSampleComplete = tempFolder + "/{study_zip}/genotype_single_sample/{sample_zip}_predGenotypes_all.csv"
    resources:
        mem_mb = 10000
    shell:
        """
        ulimit -s unlimited
        Rscript ../redo_R/genotype_outOfLattice_singleSamples.R --genotypedSamples {input.result} \
            --outOfLatticeSamples {input.outOfLattice}  \
            --model {input.model} --prior {input.prior} \
            --genotypedSamplesComplete {output.genotypedSampleComplete}
        rm {input.result}
        rm {input.outOfLattice} 
        """

#run at the zip(study_zip, sample_zip) level
rule predict_genotype_accuracy:
    input:
        genotypedSampleComplete = rules.genotype_outOfLattice_samples.output.genotypedSampleComplete,
        accuracyModelLattice = config["accuracyModelLattice"]
    params:
        outputBeforeCompression = outputFolder + "/{study_zip}/{sample_zip}_predGenotypes_w_accuracy.csv" #temp output before compression
    output:
        outputCompressed = outputFolder + "/{study_zip}/{sample_zip}_predGenotypes_w_accuracy.csv.gz"
    resources:
        mem_mb = 10000
    shell:
        """
        Rscript ../redo_R/predict_genotype_accuracy_singleSample.R --genotypedSampleComplete {input.genotypedSampleComplete} --output {params.outputBeforeCompression} --accuracyModelLattice {input.accuracyModelLattice}
        gzip {params.outputBeforeCompression}
        """

#run at the zip(study_zip, sample_zip) level and the study level
rule AggregateFiles:
    input:
        outputCompressed = expand(outputFolder + "/{study_zip}/{sample_zip}_predGenotypes_w_accuracy.csv.gz", zip, sample_zip = samples, study_zip = studies)
    output:
        finalOutput
    params:
        sample_study_zip = expand("{sample_zip}~{study_zip}", zip, sample_zip = samples, study_zip = studies)
    resources:
        mem_mb = 5000
    run:
        metadata = {'sample_study': list(params.sample_study_zip),
                    'genotypedSamples': list(input.outputCompressed),
                    }
        metadata_df = pd.DataFrame(data = metadata)

        metadata_df['sample_id'] = metadata_df["sample_study"].str.split("~", expand=True)[0]
        metadata_df['study'] = metadata_df["sample_study"].str.split("~", expand=True)[1]
        metadata_df = metadata_df.drop(columns=['sample_study'])

        #Save.
        metadata_df.to_csv(str(output), index = False)