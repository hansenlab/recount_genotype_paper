import pandas as pd
import numpy as np
import os

#Define constants generated by configfile.
configfile: "GTEx_config.yaml"
outputFolder = config["outputFolder"]
tempFolder = config["tempFolder"]
studyMetadata = pd.read_csv(config["studyMetadata"])
studies = studyMetadata["study"].unique().tolist()

modelMetadata = pd.read_csv(config["modelMetadata"])
models = modelMetadata["name"].tolist()

#Short functions to return values from model metadata. 
def getModel(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "model"].values[0]
def getModelLattice(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "modelLattice"].values[0]
def getModelPrior(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "prior"].values[0]

#Final output
finalOutput = outputFolder + "/AggregateFiles/" + os.path.basename(config["studyMetadata"])

rule all:
    input:
        finalOutput

rule get_coverage_matrix:
    input:
        studyMetadata = config["studyMetadata"],
        SNPs = config["SNPs"]
    output:
        coverage = outputFolder + "/{study}/get_coverage_matrix/{study}_coverage.rda",
        filteredSNPs = outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.rda",
        filteredSNPsList = outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.txt",
    resources:
        memory = "30G"
    shell:
        "Rscript ../R/get_coverage_matrix.R --metadata {input.studyMetadata} \
        --study {wildcards.study} --tempFolder {tempFolder} --SNPs {input.SNPs} \
        --coverage {output.coverage} \
        --filteredSNPs {output.filteredSNPs} \
        --filteredSNPsList {output.filteredSNPsList}"

rule get_alt_ref_matrix:
    input:
        studyMetadata = config["studyMetadata"],
        coverage = outputFolder + "/{study}/get_coverage_matrix/{study}_coverage.rda",
        filteredSNPs = outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.rda"
    output:
        ref = outputFolder + "/{study}/get_alt_ref_matrix/{study}_ref.rds",
        alt = outputFolder + "/{study}/get_alt_ref_matrix/{study}_alt.rds",
        major = outputFolder + "/{study}/get_alt_ref_matrix/{study}_major.rds",
        minor = outputFolder + "/{study}/get_alt_ref_matrix/{study}_minor.rds"
    resources:
        memory = "50G"
    shell:
        "Rscript ../R/get_alt_ref_matrix.R --metadata {input.studyMetadata} \
        --tempFolder {tempFolder} \
        --study {wildcards.study} \
        --coverage {input.coverage} \
        --filteredSNPs {input.filteredSNPs} \
        --ref {output.ref} \
        --alt {output.alt} \
        --major {output.major} \
        --minor {output.minor}"

rule get_genotype_matrix:
    input:
        studyMetadata = config["studyMetadata"],
        genotypedVCF = config["genotypedVCF"],
        filteredSNPsList = outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.txt",
        filteredSNPs = outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.rda"
    params:
        tempVCF = tempFolder + "/{study}.vcf",
        rawGenotypeMatrixName = outputFolder + "/{study}/get_genotype_matrix/{study}_GT_Matrix",
        rawGenotypeMatrix = outputFolder + "/{study}/get_genotype_matrix/{study}_GT_Matrix.GT.FORMAT"
    output:
        filteredGenotypeMatrix = outputFolder + "/{study}/get_genotype_matrix/{study}_genotype.rda"
    resources:
        memory = "40G"
    shell:
        """
        module load htslib
        module load vcftools
        tabix --print-header -R {input.filteredSNPsList} {input.genotypedVCF} > {params.tempVCF}
        echo "Tabix finished to extract list of SNPs to new VCF."
        vcftools --vcf {params.tempVCF} --extract-FORMAT-info GT --out {params.rawGenotypeMatrixName}
        echo "vcftools finished to extract GT tag."
        rm {params.tempVCF}
        Rscript ../R/filter_genotype_matrix.R --metadata {input.studyMetadata} \
        --study {wildcards.study} --filteredSNPs {input.filteredSNPs} \
        --genotypes {params.rawGenotypeMatrix} --filteredGenotypes {output.filteredGenotypeMatrix}
        echo "Finished R script. Removing temp files now."
        rm {params.rawGenotypeMatrixName}.GT.FORMAT
        echo "Done."
        """

rule train_genotyping_model:
    input:
        studyMetadata = config["studyMetadata"],
        ref = outputFolder + "/{study}/get_alt_ref_matrix/{study}_ref.rds",
        alt = outputFolder + "/{study}/get_alt_ref_matrix/{study}_alt.rds", 
        trueGenotype = outputFolder + "/{study}/get_genotype_matrix/{study}_genotype.rda"
    output:
        model = outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_model.rds",
        modelLattice = outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_lattice.rds",
        prior = outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_prior.rds"
    resources:
        memory = "100G"
    shell:
        "Rscript ../R/train_genotyping_model.R --metadata {input.studyMetadata} \
        --ref {input.ref} \
        --alt {input.alt} \
        --trueGenotype {input.trueGenotype} \
        --trainSampling 0.1 \
        --prior {output.prior} \
        --modelLattice {output.modelLattice} \
        --model {output.model}"

rule predict_genotype:
    input:
        ref = outputFolder + "/{study}/get_alt_ref_matrix/{study}_ref.rds",
        alt = outputFolder + "/{study}/get_alt_ref_matrix/{study}_alt.rds",
        trueGenotype = outputFolder + "/{study}/get_genotype_matrix/{study}_genotype.rda",
        model = outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_model.rds",
        modelLattice = outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_lattice.rds",
        pZg = outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_prior.rds"
    resources:
        memory = "50G"
    output:
        predictedGenotype = outputFolder + "/{study}/predict_genotype/{study}_predictedGenotype.rds"
    shell:
        "Rscript ../R/predict_genotype.R --ref {input.ref} \
        --alt {input.alt}  --model {input.model} \
        --modelLattice {input.modelLattice} \
        --pZg {input.pZg} \
        --trueGenotype {input.trueGenotype} \
        --predictedGenotype {output.predictedGenotype}"

rule train_accuracy_model:
    input:
        filteredSNPs = outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.rda",
        ref = outputFolder + "/{study}/get_alt_ref_matrix/{study}_ref.rds",
        alt = outputFolder + "/{study}/get_alt_ref_matrix/{study}_alt.rds",
        trueGenotype = outputFolder + "/{study}/get_genotype_matrix/{study}_genotype.rda",
        predictedGenotype = outputFolder + "/{study}/predict_genotype/{study}_predictedGenotype.rds"
    resources:
        memory = "40G"
    output:
        accuracy_model = outputFolder + "/{study}/train_accuracy_model/{study}_accuracy_model.rds",
        accuracy_model_lattice = outputFolder + "/{study}/train_accuracy_model/{study}_accuracy_model_lattice.rds"
    shell:
        "Rscript ../R/train_accuracy_model.R --ref {input.ref} \
        --alt {input.alt} \
        --filteredSNPs {input.filteredSNPs} \
        --trueGenotype {input.trueGenotype} \
        --predictedGenotype {input.predictedGenotype} \
        --trainSampling 0.01 \
        --model {output.accuracy_model} \
        --lattice {output.accuracy_model_lattice}"

rule AggregateFiles:
    input:
        SNPs = expand(outputFolder + "/{study}/get_coverage_matrix/{study}_filteredSNPs.rda", study = studies),
        ref = expand(outputFolder + "/{study}/get_alt_ref_matrix/{study}_ref.rds", study = studies),
        alt = expand(outputFolder + "/{study}/get_alt_ref_matrix/{study}_alt.rds", study = studies),
        trueGenotype = expand(outputFolder + "/{study}/get_genotype_matrix/{study}_genotype.rda", study = studies),
        model = expand(outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_model.rds", study = studies),
        modelLattice = expand(outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_lattice.rds", study = studies),
        prior = expand(outputFolder + "/{study}/train_genotyping_model/{study}_genotyping_prior.rds", study = studies),
        predictedGenotype = expand(outputFolder + "/{study}/predict_genotype/{study}_predictedGenotype.rds", study = studies),
        accuracy_model = expand(outputFolder + "/{study}/train_accuracy_model/{study}_accuracy_model.rds", study = studies),
        accuracy_model_lattice = expand(outputFolder + "/{study}/train_accuracy_model/{study}_accuracy_model_lattice.rds", study = studies)
    output:
        finalOutput
    resources:
        memory = "10G"
    run:
        #study metadata: each row corresponds to a study.
        newstudyMetadata = {'SNPs': list(input.SNPs),
                            'ref': list(input.ref),
                            'alt': list(input.alt),
                            'trueGenotype': list(input.trueGenotype),
                            'model': list(input.model),
                            'modelLattice': list(input.modelLattice),
                            'prior': list(input.prior),
                            'predictedGenotype': list(input.predictedGenotype),
                            'accuracy_model': list(input.accuracy_model),
                            'accuracy_model_lattice': list(input.accuracy_model_lattice)}
        newstudyMetadata_df = pd.DataFrame(data = newstudyMetadata)

        #Save.
        newstudyMetadata_df.to_csv(str(output), index = False)
