import pandas as pd
import numpy as np
import os
from datetime import datetime

#Define constants generated by configfile.
outputFolder = config["outputFolder"]
tempFolder = config["tempFolder"]
CUTOFF = 4

studyMetadata = pd.read_csv(config["studyMetadata"])
studies = studyMetadata["study"].unique().tolist()


modelMetadata = pd.read_csv(config["modelMetadata"])
models = modelMetadata["name"].tolist()

#Short functions to return values from study metadata. 
def getTotal(wildcards):
    return studyMetadata.loc[studyMetadata["sample_id_rep"] == wildcards.sample, "total"].values[0]
def getAlt(wildcards):
    return studyMetadata.loc[studyMetadata["sample_id_rep"] == wildcards.sample, "alt"].values[0]
def getGenotypedSamplesByStudy(wildcards):
    #given an element of wildcards.study, wildcards.model, return a list of samples.
    studySamples = studyMetadata.loc[studyMetadata["study"] == wildcards.study, "sample_id_rep"].values
    return [outputFolder + f"/{wildcards.study}/{wildcards.model}/genotype_single_sample/{s}_predGenotypes.csv" \
            for s in studySamples] 
def getOutOfLatticeSamplesByStudy(wildcards):
    #given an element of wildcards.study, wildcards.model, return a list of samples that are out of the lattice.
    studySamples = studyMetadata.loc[studyMetadata["study"] == wildcards.study, "sample_id_rep"].values
    return [outputFolder + f"/{wildcards.study}/{wildcards.model}/genotype_single_sample/{s}_outOfLattice.csv" \
            for s in studySamples] 
def getSampleIDRepByStudy(wildcards):
    #given an element of wildcards.study, wildcards.model, return a list of sample_id_rep.
    studySamples = studyMetadata.loc[studyMetadata["study"] == wildcards.study, "sample_id_rep"].values
    return [f"{s}" for s in studySamples]

#Short functions to return values from model metadata. 
def getModel(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "model"].values[0]
def getModelLattice(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "modelLattice"].values[0]
def getModelPrior(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "prior"].values[0]
def getAccuracyModel(wildcards):
    return modelMetadata.loc[modelMetadata["name"] == wildcards.model, "accuracyModel"].values[0]

#Final output
finalOutput = config["outputMetadata"]

rule all:
    input:
        finalOutput

rule genotype_single_sample: 
    input:
        SNPs = config["SNPs"],
        total = getTotal,
        alt = getAlt,
        model = getModel, 
        modelLattice = getModelLattice, 
        prior = getModelPrior
    output:
        result = outputFolder + "/{study}/{model}/genotype_single_sample/{sample}_predGenotypes.csv", 
        outOfLattice = outputFolder + "/{study}/{model}/genotype_single_sample/{sample}_outOfLattice.csv"
    resources:
        memory = "15G"
    shell:
        "Rscript ../../R/genotype_single_sample.R --sample_id_rep {wildcards.sample}\
        --SNPs {input.SNPs} --total {input.total} --alt {input.alt} --cutoff {CUTOFF}\
        --modelLattice {input.modelLattice} --prior {input.prior} --tempFolder {tempFolder}\
        --result {output.result} --outOfLattice {output.outOfLattice}"

rule genotype_outOfLattice_samples:
    input: 
        outOfLatticeSamples = getOutOfLatticeSamplesByStudy,
        model = getModel, 
        prior = getModelPrior
    output:
        outputFolder + "/{study}/{model}/genotype_single_sample/{study}_{model}_outOfLattice_genotyped.csv"
    resources:
        memory = "100G"
    params:
        allSampleIDRep = getSampleIDRepByStudy,
        outOfLatticeSamplesFile = tempFolder + "/{study}-{model}.outOfLatticeSamples.txt",
        allSampleIDRepFile = tempFolder + "/{study}-{model}.allSampleIDRep.txt"
    shell:
        """
        echo "{input.outOfLatticeSamples}" > {params.outOfLatticeSamplesFile}
        echo "{params.allSampleIDRep}" > {params.allSampleIDRepFile}
        Rscript ../../R/genotype_outOfLattice_samples.R --outOfLatticeSamples {params.outOfLatticeSamplesFile}  \
            --allSampleIDRep {params.allSampleIDRepFile} --model {input.model} --prior {input.prior} --result {output}
        rm {params.outOfLatticeSamplesFile}
        rm {params.allSampleIDRepFile}
        """

rule aggregate_commonSNPs:
    input: 
        allGenotypedSamples = getGenotypedSamplesByStudy,
        outOfLatticeGenotypes = outputFolder + "/{study}/{model}/genotype_single_sample/{study}_{model}_outOfLattice_genotyped.csv"
    output:
        outputFolder + "/{study}/{model}/aggregate_commonSNPs/commonSNPs.txt"
    resources:
        memory = "30G"
    run:
        genotyped_samples = list(input.allGenotypedSamples)

        all_coordinates_df = pd.read_csv(genotyped_samples[0], usecols=range(2))
        all_coordinates_df['start'] = all_coordinates_df['start'].apply(str)
        if len(genotyped_samples) > 1:
            for genotyped_sample_file in genotyped_samples[1:]:
                print(genotyped_sample_file)
                print(datetime.now())
                coordinates_df = pd.read_csv(genotyped_sample_file, usecols=range(2))
                coordinates_df['start'] = coordinates_df['start'].apply(str)
                all_coordinates_df = pd.merge(all_coordinates_df, coordinates_df, on=['chr', 'start'], how='outer')

        outOfLattice_coordinates_df = pd.read_csv(input.outOfLatticeGenotypes, usecols=range(2))
        outOfLattice_coordinates_df['start'] = outOfLattice_coordinates_df['start'].apply(str)
        outOfLattice_coordinates_df = outOfLattice_coordinates_df.drop_duplicates()
        all_coordinates_df = pd.merge(all_coordinates_df, outOfLattice_coordinates_df, on=['chr', 'start'], how='outer')

        all_coordinates_df.to_csv(str(output), sep = "\t", header = False, index = False)

rule get_genotype_matrix:
    input:
        genotypedVCF = config["genotypedVCF"],
        commonSNPs = outputFolder + "/{study}/{model}/aggregate_commonSNPs/commonSNPs.txt",
    params:
        tempVCF = tempFolder + "/{study}-{model}.vcf",
        rawGenotypeMatrixName = outputFolder + "/{study}/{model}/get_genotype_matrix/{study}_GT_Matrix"
    output:
        rawGenotypeMatrix = outputFolder + "/{study}/{model}/get_genotype_matrix/{study}_GT_Matrix.GT.FORMAT"
    resources:
        memory = "15G"
    shell:
        """
        module load htslib
        module load vcftools
        tabix --print-header -R {input.commonSNPs} {input.genotypedVCF} > {params.tempVCF}
        echo "Tabix finished to extract list of SNPs to new VCF."
        vcftools --vcf {params.tempVCF} --extract-FORMAT-info GT --out {params.rawGenotypeMatrixName}
        echo "vcftools finished to extract GT tag."
        rm {params.tempVCF}
        echo "Done."
        """

rule filter_genotype_matrix:
    input:
        studyMetadata = config["studyMetadata"],
        rawGenotypeMatrix = outputFolder + "/{study}/{model}/get_genotype_matrix/{study}_GT_Matrix.GT.FORMAT",
        commonSNPs = outputFolder + "/{study}/{model}/aggregate_commonSNPs/commonSNPs.txt"
    output:
        filteredGenotypeMatrix = outputFolder + "/{study}/{model}/get_genotype_matrix/{study}_genotype.rds"
    resources: 
        memory = "150G"
    shell:
        "Rscript ../../R/filter_genotype_matrix.R --metadata {input.studyMetadata} \
        --study {wildcards.study} --filteredSNPs {input.commonSNPs} \
        --genotypes {input.rawGenotypeMatrix} --filteredGenotypes {output.filteredGenotypeMatrix}"

rule compute_conditional_accuracy:
    input:
        allGenotypedSamples = getGenotypedSamplesByStudy,
        outOfLatticeGenotypedSamples = outputFolder + "/{study}/{model}/genotype_single_sample/{study}_{model}_outOfLattice_genotyped.csv",
        commonSNPs = outputFolder + "/{study}/{model}/aggregate_commonSNPs/commonSNPs.txt",
        genotypes = outputFolder + "/{study}/{model}/get_genotype_matrix/{study}_genotype.rds",
    params:
        allSampleIDRep = getSampleIDRepByStudy,
        allGenotypedSamplesFile = tempFolder + "/{study}-{model}.allGenotypedSamples.txt",
        allSampleIDRepFile = tempFolder + "/{study}-{model}.allSampleIDRep.txt"
    resources: 
        memory = "150G"
    output:
        conditionalAccuracy = outputFolder + "/{study}/{model}/compute_conditional_accuracy/{study}_conditionalAccuracy.rds",
        allGenotypedSamplesAgg = outputFolder + "/{study}/{model}/compute_conditional_accuracy/{study}_allGenotypedSamplesAgg.rds"
    shell:
        """
        echo "{input.allGenotypedSamples}" > {params.allGenotypedSamplesFile}
        echo "{params.allSampleIDRep}" > {params.allSampleIDRepFile}
        Rscript ../../R/conditionalAccuracy_singleSample.R --allGenotypedSamples {params.allGenotypedSamplesFile} --allSampleIDRep {params.allSampleIDRepFile} --outOfLatticeGenotypedSamples {input.outOfLatticeGenotypedSamples}\
            --commonSNPs {input.commonSNPs} --genotypes {input.genotypes} --conditionalAccuracy {output.conditionalAccuracy} --allGenotypedSamplesAgg {output.allGenotypedSamplesAgg}
        rm {params.allGenotypedSamplesFile}
        rm {params.allSampleIDRepFile}
        """

rule accuracy_model_evaluation:
    input:
        allGenotypedSamplesAgg = outputFolder + "/{study}/{model}/compute_conditional_accuracy/{study}_allGenotypedSamplesAgg.rds",
        accuracyModel = getAccuracyModel
    output:
        accuracyModelEvaluation = outputFolder + "/{study}/{model}/accuracy_model_evaluation/{study}_accuracy_model_evaluation.rds",
        accuracyModelEvaluationError = outputFolder + "/{study}/{model}/accuracy_model_evaluation/{study}_accuracy_model_evaluation_err.rds",
        allGenotypedSamplesAggUpdated = outputFolder + "/{study}/{model}/accuracy_model_evaluation/{study}_allGenotypedSamplesAggUpdated.rds",
    resources:
        memory = "60G"
    shell:
        "Rscript ../../R/accuracy_model_evaluation.R \
            --allGenotypedSamplesAgg {input.allGenotypedSamplesAgg} \
            --accuracyModel {input.accuracyModel} \
            --accuracyModelEvaluation {output.accuracyModelEvaluation} \
            --accuracyModelEvaluationError {output.accuracyModelEvaluationError} \
            --allGenotypedSamplesAggUpdated {output.allGenotypedSamplesAggUpdated} \
	    --downSampling .1"


rule AggregateFiles:
    input:
        conditionalAccuracy = expand(outputFolder + "/{study}/{model}/compute_conditional_accuracy/{study}_conditionalAccuracy.rds",\
            study = studies, model = models),
        allGenotypesOutput = expand(outputFolder + "/{study}/{model}/accuracy_model_evaluation/{study}_allGenotypedSamplesAggUpdated.rds",
            study = studies, model = models),
        accuracyModelEvaluation = expand(outputFolder + "/{study}/{model}/accuracy_model_evaluation/{study}_accuracy_model_evaluation.rds",
            study = studies, model = models),
        accuracyModelEvaluationError = expand(outputFolder + "/{study}/{model}/accuracy_model_evaluation/{study}_accuracy_model_evaluation_err.rds",
            study = studies, model = models)
    params:
        studyModel = expand("{study}~{model}", study = studies, model = models) #key for newModelData. 
    output:
        finalOutput
    resources:
        memory = "3G"
    run:
        metadata = {'studyModel': list(params.studyModel),
                    'conditionalAccuracy': list(input.conditionalAccuracy),
                    'allGenotypesOutput': list(input.allGenotypesOutput),
                    'accuracyModelEvaluation': list(input.accuracyModelEvaluation),
                    'accuracyModelEvaluationError': list(input.accuracyModelEvaluationError)}
        metadata_df = pd.DataFrame(data = metadata)
        metadata_df['study'] = metadata_df["studyModel"].str.split("~", expand=True)[0]
        metadata_df['model'] = metadata_df["studyModel"].str.split("~", expand=True)[1]
        metadata_df = metadata_df.drop(columns=['studyModel'])
        #Save.
        metadata_df.to_csv(str(output), index = False)

