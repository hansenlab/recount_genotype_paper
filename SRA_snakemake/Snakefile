import pandas as pd
import numpy as np
import os

#Define constants generated by configfile, provided by --configfile argument
outputFolder = config["outputFolder"]
tempFolder = config["tempFolder"]
finalOutput = config["outputMetadata"]
coverageCutoff = config["coverageCutoff"]

studyMetadata = pd.read_csv(config["studyMetadata"])
studyMetadata['total'].replace('', np.nan, inplace=True)
studyMetadata['alt'].replace('', np.nan, inplace=True)
studyMetadata.dropna(subset=['total'], inplace=True)
studyMetadata.dropna(subset=['alt'], inplace=True)
 
studiesUnique = studyMetadata["study"].unique().tolist()
studies = studyMetadata["study"].tolist()
samples = studyMetadata["sample_id"].tolist()


#Short functions to return values from study metadata. 
def getTotal(wildcards):
    return studyMetadata.loc[studyMetadata["sample_id"] == wildcards.sample_zip, "total"].values[0]
def getAlt(wildcards):
    return studyMetadata.loc[studyMetadata["sample_id"] == wildcards.sample_zip, "alt"].values[0]

def getGenotypedSamplesByStudy(wildcards):
    #given an element of wildcards.study, return a list of samples.
    studySamples = studyMetadata.loc[studyMetadata["study"] == wildcards.study, "sample_id"].values
    return [outputFolder + f"/{wildcards.study}/genotype_single_sample/{s}_predGenotypes.csv" \
            for s in studySamples] 
def getOutOfLatticeSamplesByStudy(wildcards):
    #given an element of wildcards.study, return a list of samples that are out of the lattice.
    studySamples = studyMetadata.loc[studyMetadata["study"] == wildcards.study, "sample_id"].values
    return [outputFolder + f"/{wildcards.study}/genotype_single_sample/{s}_outOfLattice.csv" \
            for s in studySamples]         
def getSampleIDRepByStudy(wildcards):
    #given an element of wildcards.study, return a list of sample_id.
    studySamples = studyMetadata.loc[studyMetadata["study"] == wildcards.study, "sample_id"].values
    return [f"{s}" for s in studySamples]

rule all:
    input:
        finalOutput

#run at the zip(study_zip, sample_zip) level
rule genotype_single_sample: 
    input:
        SNPs = config["SNPs"],
        total = getTotal,
        alt = getAlt,
        modelLattice = config["modelLattice"], 
        prior = config["modelPrior"]
    output:
        result = outputFolder + "/{study_zip}/genotype_single_sample/{sample_zip}_predGenotypes.csv",
        outOfLattice = outputFolder + "/{study_zip}/genotype_single_sample/{sample_zip}_outOfLattice.csv"
    resources:
        memory = "10G"
    shell:
        "Rscript ../R/genotype_singleSample.R --sample_id {wildcards.sample_zip}\
        --SNPs {input.SNPs} --total {input.total} --alt {input.alt} --cutoff {coverageCutoff}\
        --modelLattice {input.modelLattice} --prior {input.prior} --tempFolder {tempFolder}\
        --result {output.result} --outOfLattice {output.outOfLattice}"

#run at the study level
rule genotype_outOfLattice_samples:
    input: 
        outOfLatticeSamples = getOutOfLatticeSamplesByStudy,
        genotypedSamples = getGenotypedSamplesByStudy,
        model = config["model"], 
        prior = config["modelPrior"]
    output:
        outOfLatticeGenotyped = outputFolder + "/{study}/genotype_single_sample/{study}_outOfLattice_genotyped.csv"
    resources:
        memory = "40G"
    params:
        allSampleIDRep = getSampleIDRepByStudy,
        outOfLatticeSamplesFile = tempFolder + "/{study}.outOfLatticeSamples.txt",
        allSampleIDRepFile = tempFolder + "/{study}.allSampleIDRep.txt",
        genotypedSamplesFile = tempFolder + "/{study}.allGenotypedSamples.txt",
        genotypedSamplesComplete = getGenotypedSamplesByStudy, #important output file.
        genotypedSamplesCompleteFile = tempFolder + "/{study}.allGenotypedSamplesComplete.txt"
    shell:
        """
        echo "{input.outOfLatticeSamples}" > {params.outOfLatticeSamplesFile}
        echo "{params.allSampleIDRep}" > {params.allSampleIDRepFile}
        echo "{input.genotypedSamples}" > {params.genotypedSamplesFile}
        echo "{params.genotypedSamplesComplete}" > {params.genotypedSamplesCompleteFile}
        Rscript ../R/genotype_outOfLattice_samples.R --genotypedSamples {params.genotypedSamplesFile} \
            --outOfLatticeSamples {params.outOfLatticeSamplesFile}  \
            --allSampleIDRep {params.allSampleIDRepFile} --model {input.model} --prior {input.prior} \
            --genotypedSamplesComplete {params.genotypedSamplesCompleteFile} --result {output.outOfLatticeGenotyped}
        rm {params.outOfLatticeSamplesFile}
        rm {params.allSampleIDRepFile}
        rm {params.genotypedSamplesFile}
        rm {params.genotypedSamplesCompleteFile}
        """

#run at the zip(study_zip, sample_zip) level
rule predict_genotype_accuracy:
    input:
        outOfLatticeGenotyped = outputFolder + "/{study_zip}/genotype_single_sample/{study_zip}_outOfLattice_genotyped.csv", #make sure genotype_outOfLattice_samples is run.
        accuracyModelLattice = config["accuracyModelLattice"]
    params:
        genotypedSampleComplete = outputFolder + "/{study_zip}/genotype_single_sample/{sample_zip}_predGenotypes.csv", #this is our actual input. (in params b/c the output of prev. step is at study level)
    output:
        outputFolder + "/{study_zip}/predict_genotype_accuracy/{sample_zip}_predGenotypes_w_accuracy.csv"
    resources:
        memory = "10G"
    shell:
        "Rscript ../R/predict_genotype_accuracy_singleSample.R --genotypedSampleComplete {params.genotypedSampleComplete} --output {output} --accuracyModelLattice {input.accuracyModelLattice}"
    

#run at the zip(study_zip, sample_zip) level and the study level
rule AggregateFiles:
    input:
        genotypedSamples = expand(outputFolder + "/{study_zip}/predict_genotype_accuracy/{sample_zip}_predGenotypes_w_accuracy.csv", zip, sample_zip = samples, study_zip = studies),
        outOfLattice = expand(outputFolder + "/{study}/genotype_single_sample/{study}_outOfLattice_genotyped.csv", study = studiesUnique)
    output:
        finalOutput
    params:
        sample_study_zip = expand("{sample_zip}~{study_zip}", zip, sample_zip = samples, study_zip = studies)
    resources:
        memory = "10G"
    run:
        metadata = {'sample_study': list(params.sample_study_zip),
                    'genotypedSamples': list(input.genotypedSamples),
                    }
        metadata_df = pd.DataFrame(data = metadata)

        metadata_df['sample_id'] = metadata_df["sample_study"].str.split("~", expand=True)[0]
        metadata_df['study'] = metadata_df["sample_study"].str.split("~", expand=True)[1]
        metadata_df = metadata_df.drop(columns=['sample_study'])

        #Save.
        metadata_df.to_csv(str(output), index = False)

