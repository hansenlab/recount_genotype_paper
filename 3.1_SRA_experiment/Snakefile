import pandas as pd
import numpy as np
import os

#Define constants generated by configfile, provided by --configfile argument
outputFolder = config["outputFolder"]
metadata = config["metaData"]
finalOutput = config["outputMetadata"]


studyMetadata = pd.read_csv(metadata)
experimentUnique=studyMetadata["experiment_acc"].unique().tolist()

rule all:
    input:
        finalOutput,
        outExperimentCompressed = expand(outputFolder + "/{experiment_id}/genotype_experiment/{experiment_id}_genotyped.csv.gz", zip, experiment_id = experimentUnique)


rule genotype_experiment: 
     input:
        modelLattice = config["modelLattice"], 
        prior = config["modelPrior"],
        model = config["model"],
        metadata = config["metaData"],
        accuracyModelLattice = config["accuracyModelLattice"]
     params:
         outExperiment = outputFolder + "/{experiment_id}/genotype_experiment/{experiment_id}_genotyped.csv",
         tempFolderPath = config["tempFolder"]
     output:
         outExperimentCompressed = outputFolder + "/{experiment_id}/genotype_experiment/{experiment_id}_genotyped.csv.gz"
     resources:
         mem_mb = 30000
     shell:
         """
         Rscript ../R/genotype_experiment.R --model {input.model} --tempFolder {params.tempFolderPath} --experiment_id {wildcards.experiment_id}\
         --modelLattice {input.modelLattice} --prior {input.prior} --metadata {input.metadata}\
         --accuracyModelLattice {input.accuracyModelLattice} --outExperiment {params.outExperiment}
         gzip {params.outExperiment}
         """

#run at the zip(study_zip, sample_zip) level and the study level
rule AggregateFiles:
    input:
        outExperimentCompressed = expand(outputFolder + "/{experiment_id}/genotype_experiment/{experiment_id}_genotyped.csv.gz", zip, experiment_id = experimentUnique)
    output:
        finalOutput
    params:
        experiment = expand("{experiment_id}", experiment_id = experimentUnique)
    resources:
        mem_mb = 5000
    run:
        metadata = {'experimet_id': list(params.experiment),
                    'genotypedExperiment': list(input.outExperimentCompressed),
                    }
        metadata_df = pd.DataFrame(data = metadata)
        #Save.
        metadata_df.to_csv(str(output), index = False)



